# -*- mode: ruby -*-

ENV['VAGRANT_DEFAULT_PROVIDER'] = 'linode'

Vagrant.configure('2') do |config|
  machines = (data['vm']['multi_machine_enabled'].to_s == '1') ?
    data['vm']['multi_machine'] :
    {0 => {
      'id'         => 'puphpet-box',
      'hostname'   => data['vm']['hostname'],
      'datacenter' => data['vm']['provider']['linode']['datacenter'],
      'label'      => data['vm']['provider']['linode']['label'],
    }}

  machines.each do |i, machine|
    config.vm.define "#{machine['id']}" do |machine_id|
      machine_id.vm.box      = 'dummy'
      machine_id.vm.hostname = "#{machine['hostname']}"

      machine_id.ssh.private_key_path = "#{data['ssh']['private_key_path']}"
      machine_id.ssh.username         = "#{data['ssh']['username']}"

      machine_id.vm.provider :linode do |li, override|
        li.token        = "#{data['vm']['provider']['linode']['token']}"
        li.distribution = "#{data['vm']['provider']['linode']['distribution']}"
        li.datacenter   = "#{machine['datacenter']}"
        li.plan         = "#{data['vm']['provider']['linode']['plan']}"
        li.ssh_key_name = "#{data['vm']['provider']['linode']['ssh_key_name']}"
        li.label        = "#{machine['label']}"
      end

      data['vm']['synced_folder'].each do |i, folder|
        if folder['source'] != '' && folder['target'] != ''
          machine_id.vm.synced_folder "#{folder['source']}", "#{folder['target']}", 
            id: "#{i}"
        end
      end

      ssh_username = !data['ssh']['username'].nil? ? 
        data['ssh']['username'] : 
        'vagrant'

      machine_id.vm.provision 'shell' do |s|
        s.path = 'puphpet/shell/initial-setup.sh'
        s.args = '/vagrant/puphpet'
      end
      machine_id.vm.provision 'shell' do |s|
        s.path = 'puphpet/shell/check-puppet-modules.sh'
      end
      machine_id.vm.provision 'shell' do |s|
        s.path = 'puphpet/shell/install-puppet.sh'
      end
      machine_id.vm.provision :shell do |s|
        s.path = 'puphpet/shell/execute-files.sh'
        s.args = ['exec-preprovision']
      end

      machine_id.vm.provision :puppet do |puppet|
        puppet.facter = {
          'fqdn'             => "#{machine_id.vm.hostname}",
          'ssh_username'     => "#{ssh_username}",
          'provisioner_type' => ENV['VAGRANT_DEFAULT_PROVIDER'],
        }
        puppet.manifests_path = "#{data['vm']['provision']['puppet']['manifests_path']}"
        puppet.manifest_file  = ""
        puppet.module_path    = "#{data['vm']['provision']['puppet']['module_path']}"

        if !data['vm']['provision']['puppet']['options'].empty?
          puppet.options = data['vm']['provision']['puppet']['options']
        end
      end

      machine_id.vm.provision :shell do |s|
        s.path = 'puphpet/shell/execute-files.sh'
        s.args = ['exec-once', 'exec-always']
      end
      machine_id.vm.provision :shell, run: 'always' do |s|
        s.path = 'puphpet/shell/execute-files.sh'
        s.args = ['startup-once', 'startup-always']
      end

      machine_id.vm.provision :shell, privileged: false do |s|
        s.path = 'puphpet/shell/execute-files.sh'
        s.args = ['exec-once-unprivileged', 'exec-always-unprivileged']
      end
      machine_id.vm.provision :shell, run: 'always', privileged: false do |s|
        s.path = 'puphpet/shell/execute-files.sh'
        s.args = ['startup-once-unprivileged', 'startup-always-unprivileged']
      end

      machine_id.vm.provision :shell, :path => 'puphpet/shell/important-notices.sh'

      if !data['ssh']['host'].nil?
        machine_id.ssh.host = "#{data['ssh']['host']}"
      end
      if !data['ssh']['port'].nil?
        machine_id.ssh.port = "#{data['ssh']['port']}"
      end
      if !data['ssh']['guest_port'].nil?
        machine_id.ssh.guest_port = data['ssh']['guest_port']
      end
      if !data['ssh']['shell'].nil?
        machine_id.ssh.shell = "#{data['ssh']['shell']}"
      end
      if !data['ssh']['keep_alive'].nil?
        machine_id.ssh.keep_alive = data['ssh']['keep_alive']
      end
      if !data['ssh']['forward_agent'].nil?
        machine_id.ssh.forward_agent = data['ssh']['forward_agent']
      end
      if !data['ssh']['forward_x11'].nil?
        machine_id.ssh.forward_x11 = data['ssh']['forward_x11']
      end
    end
  end
end
