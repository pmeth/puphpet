# -*- mode: ruby -*-

vagrant_home = (ENV['VAGRANT_HOME'].to_s.split.join.length > 0) ? 
  ENV['VAGRANT_HOME'] : 
  "#{ENV['HOME']}/.vagrant.d"
vagrant_dot  = (ENV['VAGRANT_DOTFILE_PATH'].to_s.split.join.length > 0) ? 
  ENV['VAGRANT_DOTFILE_PATH'] : 
  "#{dir}/.vagrant"

Vagrant.configure('2') do |config|
  machines = (data['vm']['multi_machine_enabled'].to_s == '1') ?
    data['vm']['multi_machine'] :
    {0 => {
      'id'              => 'local',
      'hostname'        => data['vm']['hostname'],
      'private_network' => data['vm']['network']['private_network'],
      'public_network'  => data['vm']['network']['public_network'],
      'forwarded_port'  => data['vm']['network']['forwarded_port'],
    }}

  machines.each do |i, machine|
    config.vm.define "#{machine['id']}" do |machine_id|
      machine_id.vm.box     = "#{data['vm']['box']}"
      machine_id.vm.box_url = "#{data['vm']['box_url']}"

      if data['vm']['box_version'].to_s != ''
        machine_id.vm.box_version = "#{data['vm']['box_version']}"
      end

      machine_id.ssh.insert_key = data['ssh']['insert_key']

      if machine['hostname'].to_s.strip.length != 0
        machine_id.vm.hostname = "#{machine['hostname']}"
      end

      if machine['private_network'].to_s != ''
        machine_id.vm.network 'private_network', 
          ip: "#{machine['private_network']}"
      end

      if machine['public_network'].to_s != ''
        machine_id.vm.network 'public_network'
        if machine['public_network'].to_s != '1'
          machine_id.vm.network 'public_network', 
            ip: "#{machine['public_network']}"
        end
      end

      machine['forwarded_port'].each do |i, port|
        if port['guest'] != '' && port['host'] != ''
          machine_id.vm.network :forwarded_port, 
            guest:        port['guest'].to_i, 
            host:         port['host'].to_i, 
            auto_correct: true
        end
      end

      port_range_start = data['vm']['usable_port_range']['start'].to_i
      port_range_stop  = data['vm']['usable_port_range']['stop'].to_i

      machine_id.vm.usable_port_range = (port_range_start..port_range_stop)

      if !data['vm']['post_up_message'].nil?
        machine_id.vm.post_up_message = "#{data['vm']['post_up_message']}"
      end

      # https://github.com/tmatilai/vagrant-proxyconf
      if Vagrant.has_plugin?('vagrant-proxyconf')
        case data['proxy']['enabled']
          when true, 'true', 1, '1'
            machine_id.proxy.enabled = true
          when false, 'false', 0, '0'
            machine_id.proxy.enabled = false
        end

        if data['proxy']['http'].to_s != ''
          machine_id.proxy.http = "#{data['proxy']['http']}"
        end
        if data['proxy']['https'].to_s != ''
          machine_id.proxy.https = "#{data['proxy']['https']}"
        end
        if data['proxy']['ftp'].to_s != ''
          machine_id.proxy.ftp = "#{data['proxy']['ftp']}"
        end
        if data['proxy']['no_proxy'].to_s != ''
          machine_id.proxy.no_proxy = "#{data['proxy']['no_proxy']}"
        end
      end

      # https://github.com/smdahlen/vagrant-hostmanager
      if Vagrant.has_plugin?('vagrant-hostmanager')
        hosts = Array.new()

        if !configValues['hosts'].nil?
          configValues['hosts'].each do |host|
            hosts.push(host)
          end
        end

        if !configValues['apache']['install'].nil? &&
            configValues['apache']['install'].to_i == 1 &&
            configValues['apache']['vhosts'].is_a?(Hash)
          configValues['apache']['vhosts'].each do |i, vhost|
            hosts.push(vhost['servername'])

            if vhost['serveraliases'].is_a?(Array)
              vhost['serveraliases'].each do |vhost_alias|
                hosts.push(vhost_alias)
              end
            end
          end
        elsif !configValues['nginx']['install'].nil? &&
               configValues['nginx']['install'].to_i == 1 &&
               configValues['nginx']['vhosts'].is_a?(Hash)
          configValues['nginx']['vhosts'].each do |i, vhost|
            hosts.push(vhost['server_name'])

            if vhost['server_aliases'].is_a?(Array)
              vhost['server_aliases'].each do |vhost_alias|
                hosts.push(vhost_alias)
              end
            end
          end
        end

        if hosts.any?
          if machine_id.vm.hostname.to_s.strip.length == 0
            machine_id.vm.hostname = "#{machine['id']}-dev-machine"
          end

          machine_id.hostmanager.enabled           = true
          machine_id.hostmanager.manage_host       = true
          machine_id.hostmanager.ignore_private_ip = false
          machine_id.hostmanager.include_offline   = false
          machine_id.hostmanager.aliases           = hosts

          machine_id.vm.provision :hostmanager
        end
      end

      # https://github.com/fgrehm/vagrant-cachier
      if Vagrant.has_plugin?('vagrant-cachier')
        machine_id.cache.scope = :box
      end

      data['vm']['synced_folder'].each do |i, folder|
        if folder['source'] != '' && folder['target'] != ''
          sync_owner = !folder['owner'].nil? ? folder['owner'] : 'www-data'
          sync_group = !folder['group'].nil? ? folder['group'] : 'www-data'

          if folder['sync_type'] == 'nfs'
            if Vagrant.has_plugin?('vagrant-bindfs')
              machine_id.vm.synced_folder "#{folder['source']}", "/mnt/vagrant-#{i}", 
                id: "#{i}", 
                type: 'nfs'
              machine_id.bindfs.bind_folder "/mnt/vagrant-#{i}", "#{folder['target']}", 
                after: :provision, 
                force_user: sync_owner, 
                force_group: sync_group, 
                perms: "u=rwX:g=rwX:o=rD", 
                o: 'nonempty'
            else
              machine_id.vm.synced_folder "#{folder['source']}", "#{folder['target']}", 
                id: "#{i}", 
                type: 'nfs', 
                :nfs => { :mount_options => ["dmode=777","fmode=666"] }
            end
          elsif folder['sync_type'] == 'smb'
            smb__host     = !folder['smb']['smb_host'].nil? ? 
              folder['smb']['smb_host'] : 
              nil
            smb__username = !folder['smb']['smb_username'].nil? ? 
              folder['smb']['smb_username'] : 
              nil
            smb__password = !folder['smb']['smb_password'].nil? ? 
              folder['smb']['smb_password'] : 
              nil
            smb__dir_options  = !folder['smb']['mount_options']['dir_mode'].nil? ? 
              folder['smb']['mount_options']['dir_mode'] : 
              0775
            smb__file_options = !folder['smb']['mount_options']['file_mode'].nil? ? 
              folder['smb']['mount_options']['file_mode'] : 
              0664

            machine_id.vm.synced_folder "#{folder['source']}", "#{folder['target']}", 
              id: "#{i}", 
              type: 'smb',
              group: sync_group, 
              owner: sync_owner, 
              smb_host: smb__host, 
              smb_username: smb__username, 
              smb_password: smb__password, 
              mount_options: ["dir_mode=#{smb__dir_options},file_mode=#{smb__file_options}"]
          elsif folder['sync_type'] == 'rsync'
            rsync_args    = !folder['rsync']['args'].nil? ? 
              folder['rsync']['args'] : 
              ['--verbose', '--archive', '-z']
            rsync_auto    = !folder['rsync']['auto'].nil? ? 
              folder['rsync']['auto'] : 
              true
            rsync_exclude = !folder['rsync']['exclude'].nil? ? 
              folder['rsync']['exclude'] : 
              ['.vagrant/']

            machine_id.vm.synced_folder "#{folder['source']}", "#{folder['target']}", 
              id: "#{i}",
              rsync__args: rsync_args, 
              rsync__exclude: rsync_exclude, 
              rsync__auto: rsync_auto, 
              type: 'rsync', 
              group: sync_group, 
              owner: sync_owner
          elsif data['vm']['chosen_provider'] == 'parallels'
            machine_id.vm.synced_folder "#{folder['source']}", "#{folder['target']}", 
              id: "#{i}",
              group: sync_group, 
              owner: sync_owner, 
              mount_options: ['share']
          else
            machine_id.vm.synced_folder "#{folder['source']}", "#{folder['target']}", 
              id: "#{i}",
              group: sync_group, 
              owner: sync_owner, 
              mount_options: ['dmode=775', 'fmode=774']
          end
        end
      end

      chosen_provider = data['vm']['chosen_provider']

      unless ENV.fetch('VAGRANT_DEFAULT_PROVIDER', '').strip.empty?
        chosen_provider = ENV['VAGRANT_DEFAULT_PROVIDER'];
      end

      if chosen_provider.empty? || chosen_provider == 'virtualbox'
        ENV['VAGRANT_DEFAULT_PROVIDER'] = 'virtualbox'

        machine_id.vm.provider :virtualbox do |virtualbox|
          data['vm']['provider']['virtualbox']['modifyvm'].each do |key, value|
            if key == 'memory'
              next
            end
            if key == 'cpus'
              next
            end

            if key == 'natdnshostresolver1'
              value = value ? 'on' : 'off'
            end

            virtualbox.customize ['modifyvm', :id, "--#{key}", "#{value}"]
          end

          virtualbox.customize ['modifyvm', :id, '--memory', "#{data['vm']['memory']}"]
          virtualbox.customize ['modifyvm', :id, '--cpus', "#{data['vm']['cpus']}"]

          if !data['vm']['provider']['virtualbox']['showgui'].nil? &&
            data['vm']['provider']['virtualbox']['showgui'].to_i == 1
            virtualbox.gui = true
          end

          if data['vm']['provider']['virtualbox']['modifyvm']['name'].nil? ||
            data['vm']['provider']['virtualbox']['modifyvm']['name'].empty?
            if machine_id.vm.hostname.to_s.strip.length != 0
              virtualbox.customize ['modifyvm', :id, '--name', machine_id.vm.hostname]
            end
          end

          virtualbox.customize ['setextradata', 
            :id, "VBoxInternal2/SharedFoldersEnableSymlinksCreate//vagrant", '1'
          ]

          data['vm']['synced_folder'].each do |i, folder|
            virtualbox.customize ['setextradata', 
              :id, "VBoxInternal2/SharedFoldersEnableSymlinksCreate//#{i}", '1'
            ]
          end
        end
      end

      if chosen_provider == 'vmware_fusion' || chosen_provider == 'vmware_workstation'
        ENV['VAGRANT_DEFAULT_PROVIDER'] = (chosen_provider == 'vmware_fusion') ? 
          'vmware_fusion' : 
          'vmware_workstation'

        machine_id.vm.provider :vmware_fusion do |v, override|
          data['vm']['provider']['vmware'].each do |key, value|
            if key == 'memsize'
              next
            end
            if key == 'cpus'
              next
            end

            v.vmx["#{key}"] = "#{value}"
          end

          v.vmx['memsize']  = "#{data['vm']['memory']}"
          v.vmx['numvcpus'] = "#{data['vm']['cpus']}"

          if data['vm']['provider']['vmware']['displayName'].nil? ||
            data['vm']['provider']['vmware']['displayName'].empty?
            if machine_id.vm.hostname.to_s.strip.length != 0
              v.vmx['displayName'] = machine_id.vm.hostname
            end
          end
        end
      end

      if chosen_provider == 'parallels'
        ENV['VAGRANT_DEFAULT_PROVIDER'] = 'parallels'

        machine_id.vm.provider 'parallels' do |v|
          data['vm']['provider']['parallels'].each do |key, value|
            skipKeys = [
              'memsize', 
              'cpus', 
              'use_linked_clone', 
              'check_guest_tools', 
              'update_guest_tools'
            ]

            if skipKeys.include? key
              next
            end

            v.customize ['set', :id, "--#{key}", "#{value}"]
          end

          if !data['vm']['provider']['parallels']['use_linked_clone'].nil? &&
            data['vm']['provider']['parallels']['use_linked_clone'].to_i == 1
            v.use_linked_clone = true
          end

          if !data['vm']['provider']['parallels']['check_guest_tools'].nil? &&
            data['vm']['provider']['parallels']['check_guest_tools'].to_i == 1
            v.check_guest_tools = true
          end

          if !data['vm']['provider']['parallels']['update_guest_tools'].nil? &&
            data['vm']['provider']['parallels']['update_guest_tools'].to_i == 1
            v.update_guest_tools = true
          end

          v.memory = "#{data['vm']['memory']}"
          v.cpus   = "#{data['vm']['cpus']}"

          if data['vm']['provider']['parallels']['name'].nil? ||
            data['vm']['provider']['parallels']['name'].empty?
            if machine_id.vm.hostname.to_s.strip.length != 0
              v.name = machine_id.vm.hostname
            end
          end
        end
      end
    
      ssh_username = !data['ssh']['username'].nil? ? 
        data['ssh']['username'] : 
        'vagrant'

      machine_id.vm.provision :shell, 
        :inline => "sed -i -e 's/\r$//' /vagrant/puphpet/shell/*.sh"
      machine_id.vm.provision 'shell' do |s|
        s.path = 'puphpet/shell/initial-setup.sh'
        s.args = '/vagrant/puphpet'
      end
      machine_id.vm.provision 'shell' do |s|
        s.path = 'puphpet/shell/ssh-keygen.sh'
        s.args = "#{ssh_username}"
      end
      machine_id.vm.provision 'shell' do |s|
        s.path = 'puphpet/shell/check-puppet-modules.sh'
      end
      machine_id.vm.provision 'shell' do |s|
        s.path = 'puphpet/shell/install-puppet.sh'
      end
      machine_id.vm.provision :shell do |s|
        s.path = 'puphpet/shell/execute-files.sh'
        s.args = ['exec-preprovision']
      end

      machine_id.vm.provision :puppet do |puppet|
        puppet.facter = {
          'fqdn'             => "#{machine_id.vm.hostname}",
          'ssh_username'     => "#{ssh_username}",
          'provisioner_type' => ENV['VAGRANT_DEFAULT_PROVIDER'],
        }
        puppet.manifests_path = "#{data['vm']['provision']['puppet']['manifests_path']}"
        puppet.manifest_file  = ""
        puppet.module_path    = "#{data['vm']['provision']['puppet']['module_path']}"

        if !data['vm']['provision']['puppet']['options'].empty?
          puppet.options = data['vm']['provision']['puppet']['options']
        end
      end

      machine_id.vm.provision :shell do |s|
        s.path = 'puphpet/shell/execute-files.sh'
        s.args = ['exec-once', 'exec-always']
      end
      machine_id.vm.provision :shell, run: 'always' do |s|
        s.path = 'puphpet/shell/execute-files.sh'
        s.args = ['startup-once', 'startup-always']
      end

      machine_id.vm.provision :shell, privileged: false do |s|
        s.path = 'puphpet/shell/execute-files.sh'
        s.args = ['exec-once-unprivileged', 'exec-always-unprivileged']
      end
      machine_id.vm.provision :shell, run: 'always', privileged: false do |s|
        s.path = 'puphpet/shell/execute-files.sh'
        s.args = ['startup-once-unprivileged', 'startup-always-unprivileged']
      end

      machine_id.vm.provision :shell, :path => 'puphpet/shell/important-notices.sh'

      if !data['ssh']['host'].nil?
        machine_id.ssh.host = "#{data['ssh']['host']}"
      end
      if !data['ssh']['port'].nil?
        machine_id.ssh.port = "#{data['ssh']['port']}"
      end
      if !data['ssh']['username'].nil?
        machine_id.ssh.username = "#{data['ssh']['username']}"
      end
      if !data['ssh']['guest_port'].nil?
        machine_id.ssh.guest_port = data['ssh']['guest_port']
      end
      if !data['ssh']['shell'].nil?
        machine_id.ssh.shell = "#{data['ssh']['shell']}"
      end
      if !data['ssh']['keep_alive'].nil?
        machine_id.ssh.keep_alive = data['ssh']['keep_alive']
      end
      if !data['ssh']['forward_agent'].nil?
        machine_id.ssh.forward_agent = data['ssh']['forward_agent']
      end
      if !data['ssh']['forward_x11'].nil?
        machine_id.ssh.forward_x11 = data['ssh']['forward_x11']
      end
      if !data['vagrant']['host'].nil?
        machine_id.vagrant.host = data['vagrant']['host'].gsub(':', '').intern
      end
    end
  end
end
